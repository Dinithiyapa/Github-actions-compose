name: Build, Push Docker Images, and Update Linode Server

on:
  push:
    branches:
      - '**'  # Trigger the workflow on pushes to any branch

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push web image
        uses: docker/build-push-action@v4
        with:
          context: ./web  # Path to the web app's Dockerfile
          push: true
          tags: yapadinithi/buzbud-web-action:${{ github.run_number }}-${{ github.run_attempt }}  # Use run number and attempt number for tagging

  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./api  # Path to the API's Dockerfile
          push: true
          tags: yapadinithi/buzbud-api-action:${{ github.run_number }}-${{ github.run_attempt }}  # Use run number and attempt number for tagging

  update-linode:
    name: Update Linode Server
    needs:
      - build-web
      - build-api
    runs-on: ubuntu-latest
    steps:
      - name: Execute remote SSH commands to clone repo and run docker-compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            # Navigate to the deployment directory and check if it exists
            if [ ! -d "/home/username/github-actions-compose" ]; then
              git clone https://github.com/Dinithiyapa/Github-actions-compose.git /home/username/github-actions-compose
            fi

            # Change directory to the cloned repository
            cd /home/username/github-actions-compose

            # List the files to confirm docker-compose.yml exists
            ls -la

            # Pull the latest images and restart services using Docker Compose
            docker-compose pull
            docker-compose up -d --remove-orphans

            # Navigate to the deployment directory and run update commands
            cd /path/to/your/deployment
            bash update.sh
