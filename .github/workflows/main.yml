version: '3.8'

services:
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "${PORT}:${PORT}"  # Exposes Nginx on the specified port
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Mount custom Nginx configuration
    networks:
      - frontend
      - backend  # Connects to both networks for routing traffic
    depends_on:
      - web
      - api
    restart: unless-stopped

  web:
    image: yapadinithi/buzbud-web-action
    deploy:
      replicas: 2  # Scale the web service with 2 replicas
    ports:
      - "3000-3001:3000"  # Map web ports to host ports
    command: npm start
    environment:
      - PORT=3000-3001
      - API_HOST=${API_HOST}
    networks:
      - backend
    depends_on:
      - api
    restart: unless-stopped

  api:
    image: yapadinithi/buzbud-api-action
    deploy:
      replicas: 2  # Scale the API service with 2 replicas
    ports:
      - "4000-4002:4000"  # Map API ports to host ports
    command: npm start
    environment:
      - PORT=4000-4002
      - DB=${API_DB}
    networks:
      - backend
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:9.6  # Use PostgreSQL 9.6
    volumes:
      - /data/mount:/var/lib/postgresql/data  # Persist PostgreSQL data
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    networks:
      - backend
    env_file:
      - .env  # Load environment variables from .env file
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  frontend:
    driver: bridge  # Frontend network
  backend:
    driver: bridge  # Backend network
